%{
#include <string>
#include <cstring>  // For strdup
#include "ast.h"
#include "parser.hpp" // Generated by Bison

// Define yylval
extern YYSTYPE yylval;
%}

%option noyywrap

%%

[ \r\t\n]+                /* ignore whitespace */
"//"[^\n]*              /* ignore single-line comments */
"/*"([^*]|"*"[^/])*"*/" /* ignore multi-line comments */

"enum"                  { return ENUM; }
"int"                   { return INT_TYPE; }
"bool"                  { return BOOL_TYPE; }
"true"                  { return TRUE; }
"false"                 { return FALSE; }

"("                     { return LPAREN; }
")"                     { return RPAREN; }
"{"                     { return LBRACE; }
"}"                     { return RBRACE; }
";"                     { return SEMICOLON; }
","                     { return COMMA; }

"->"                    { return ARROW; }
"!"                     { return NOT; }
"&"                    { return AND; }
"|"                    { return OR; }
"O"                     { return O; }
"H"                     { return H; }
"S"                     { return S; }
"Y"                     { return Y; }

">"                     { return GT; }
"<"                     { return LT; }
">="                    { return GTE; }
"<="                    { return LTE; }
"="                    { return EQ; }
"!="                    { return NEQ; }

[a-zA-Z_][a-zA-Z0-9_]*  { 
                           yylval.str = strdup(yytext);  // Use strdup
                           return ID; 
                        }
-?[0-9]+                  { 
                           yylval.val = std::stoi(yytext);
                           return INT; 
                        }

.                       { /* ignore unrecognized characters */ }

%%