<SAE_PACKET> ::= <COMMIT> | <CONFIRM> ;

<COMMIT> ::= <AUTH_ALGO> <AUTH_SEQ_COMMIT> <STATUS_CODE> <GROUP_ID> <AC_TOKEN> <SCALAR> <ELEMENT> <PASSWORD_IDENTIFIER> <REJECTED_GROUPS> <AC_TOKEN_CONTAINER> 
{
<AUTH_ALGO> <- int_to_bitvector(16, 3);
int_to_bitvector(16, 19) bvlte <GROUP_ID> land 
            <GROUP_ID> bvlte int_to_bitvector(16, 20); 
<AUTH_SEQ_COMMIT> <- int_to_bitvector(16, 1); 
<STATUS_CODE> = int_to_bitvector(16, 0) lor 
<STATUS_CODE> = int_to_bitvector(16, 1) lor 
<STATUS_CODE> = int_to_bitvector(16, 126); 
(
(lnot (<STATUS_CODE> = int_to_bitvector(16, 1))) 
);
(lnot (<STATUS_CODE> = int_to_bitvector(16, 0)));
    };

<AUTH_ALGO> :: BitVector(16)
    { 
<AUTH_ALGO> = int_to_bitvector(16, 0) lor 
<AUTH_ALGO> = int_to_bitvector(16, 3); 
};

<CONFIRM> ::= <AUTH_ALGO> <AUTH_SEQ_CONFIRM> <STATUS_CODE> <SEND_CONFIRM_COUNTER> <CONFIRM_HASH>
{
<AUTH_ALGO> <- int_to_bitvector(16, 3);
<AUTH_SEQ_CONFIRM> <- int_to_bitvector(16, 2); 
<STATUS_CODE> = int_to_bitvector(16, 0) lor 
<STATUS_CODE> = int_to_bitvector(16, 1);
};

<GROUP_ID> :: BitVector(16);

<AUTH_SEQ_COMMIT> :: BitVector(16)   
{ <AUTH_SEQ_COMMIT> <- 0b0000000000000001; }; 

<AUTH_SEQ_CONFIRM> :: BitVector(16) 
{ <AUTH_SEQ_CONFIRM> <- 0b0000000000000010; };

<STATUS_CODE> :: BitVector(16);


<AC_TOKEN> :: Placeholder 
{ <AC_TOKEN> <- "<AC_TOKEN>"; };

<PASSWORD_IDENTIFIER> ::= <PASSWD_ELEMENT_ID> <PASSWD_ID_LENGTH> <PASSWD_ELEMENT_ID_EXTENSION> <PASSWD_ID> 
{ <PASSWD_ID_LENGTH> <- int_to_bitvector(8, (length(<PASSWD_ID>)/8)+1); };

<PASSWD_ELEMENT_ID> :: BitVector(8) 
{ <PASSWD_ELEMENT_ID> <- int_to_bitvector(8, 255); };


<PASSWD_ID_LENGTH> :: BitVector(8);

<PASSWD_ELEMENT_ID_EXTENSION> :: BitVector(8)
{ <PASSWD_ELEMENT_ID_EXTENSION> <- int_to_bitvector(8, 33); };

<PASSWD_ID> :: BitVector(8)
{
    lnot (<PASSWD_ID> = int_to_bitvector(8, 0));
};

<REJECTED_GROUPS> ::= <RG_ELEMENT_ID> <RG_ID_LENGTH> <RG_ELEMENT_ID_EXTENSION> <RG_ID_LIST>
{ <RG_ID_LENGTH> <- int_to_bitvector(8, (length(<RG_ID_LIST>)/8)+1) ;
};

<RG_ELEMENT_ID> :: BitVector(8) 
{ <RG_ELEMENT_ID> <- int_to_bitvector(8, 255); };

<RG_ID_LENGTH>   :: BitVector(8); 

<RG_ELEMENT_ID_EXTENSION> :: BitVector(8) 
{ <RG_ELEMENT_ID_EXTENSION> <- int_to_bitvector(8, 92); };

<RG_ID_LIST> ::= <RG_ID> | <RG_ID> <RG_ID_LIST>;

<RG_ID> :: BitVector(16) { 
    <RG_ID> = int_to_bitvector(16, 20) lor 
    <RG_ID> = int_to_bitvector(16, 21); 
} ;

<AC_TOKEN_CONTAINER> ::= <AC_ELEMENT_ID> <AC_ID_LENGTH> <AC_ELEMENT_ID_EXTENSION> 
<AC_TOKEN_ELEMENT>
{ <AC_ID_LENGTH> <- int_to_bitvector(8, (length(<AC_TOKEN_ELEMENT>)/8)+1); 
    lnot (length(<AC_TOKEN_ELEMENT>) = 0) ;
};

<AC_ELEMENT_ID> :: BitVector(8) 
{ <AC_ELEMENT_ID> <- int_to_bitvector(8, 255); };

<AC_ID_LENGTH> :: BitVector(8);

<AC_ELEMENT_ID_EXTENSION> :: BitVector(8)
{ <AC_ELEMENT_ID_EXTENSION> <- int_to_bitvector(8, 93); };

<AC_TOKEN_ELEMENT> :: BitList;

<SCALAR>     :: Placeholder  
{ <SCALAR> <- "<SCALAR>"; };

<ELEMENT> :: Placeholder 
{<ELEMENT> <- "<ELEMENT>"; };

<CONFIRM_HASH> :: Placeholder 
{ <CONFIRM_HASH> <- "<CONFIRM_HASH>"; };

<SEND_CONFIRM_COUNTER> :: Placeholder
{ <SEND_CONFIRM_COUNTER> <- "<SEND_CONFIRM_COUNTER>"; };